# language=SQL
Expense.findBudgetOverrunsWithinDateRange=\
      SELECT e.user_id \
           , SUM(e.amount) - :threshold AS "amount" \
        FROM expenses e \
       WHERE e.user_id NOT IN (:skipUserIds) \
         AND e.date BETWEEN :dateFrom AND :dateTill \
    GROUP BY e.user_id \
      HAVING SUM(e.amount) - :threshold > 0.00

# language=SQL
Expense.findAllWithinDateRangeSkippingUserIds=\
    SELECT e.id \
         , e.date \
         , e.amount \
         , e.user_id \
         , e.version \
         , e.created_date_time \
         , e.updated_date_time \
      FROM expenses e \
     WHERE e.user_id NOT IN (:skipUids) \
       AND (CASE \
                WHEN (CAST(:dateFrom AS DATE) IS NOT NULL AND CAST(:dateFrom AS DATE) IS NOT NULL) \
                    THEN e.date BETWEEN :dateFrom AND :dateTill \
                WHEN (CAST(:dateFrom AS DATE) IS NOT NULL AND CAST(:dateFrom AS DATE) IS NULL) \
                    THEN e.date >= :dateFrom \
                WHEN (CAST(:dateFrom AS DATE) IS NULL AND CAST(:dateFrom AS DATE) IS NOT NULL) \
                    THEN e.date <= :dateTill \
                ELSE TRUE \
            END)
