# language=SQL
Expense.findBudgetOverrunsWithinDateRange=\
      SELECT e.user_id \
           , SUM(e.amount) - :threshold AS "amount" \
        FROM expenses e \
       WHERE e.user_id NOT IN ( :#{ #skipUserIds.isEmpty() ? -1 : #skipUserIds } ) \
         AND e.date BETWEEN :dateFrom AND :dateTill \
    GROUP BY e.user_id \
      HAVING SUM(e.amount) - :threshold > 0.00

# language=SQL
Expense.findAllWithinDateRangeSkippingUserIds=\
      SELECT e.id \
           , e.date \
           , e.amount \
           , e.user_id \
        FROM expenses e \
       WHERE e.user_id NOT IN ( :#{ #skipUids.isEmpty() ? -1 : #skipUids } ) \
         AND ( \
                CAST(:dateFrom AS DATE) IS NULL \
             OR CAST(:dateTill AS DATE) IS NULL \
             OR e.date BETWEEN :dateFrom AND :dateTill \
             )

# language=SQL
Expense.deleteByUserId=\
    DELETE FROM expenses e \
          WHERE e.user_id = :userId
